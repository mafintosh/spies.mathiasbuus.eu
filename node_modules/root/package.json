{
  "name": "root",
  "version": "0.5.4",
  "dependencies": {
    "murl": "0.2.x",
    "protein": "0.5.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/root"
  },
  "description": "a super lightweight web framework featuring prototype mixin support and routing",
  "keywords": [
    "lightweight",
    "web",
    "routing",
    "mixin",
    "http"
  ],
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "readme": "# root\n\nA super lightweight web framework with routing and prototype [mixin](https://github.com/mafintosh/protein) support.\n\nIt's available through npm:\n\n\tnpm install root\n\n## Usage\n\nUsage is simple\n\n``` js\nvar root = require('root');\nvar app = root();\n\napp.get('/', function(request, response) {\n\tresponse.send({hello:'world'});\n});\napp.post('/echo', function(request, response) {\n\trequest.on('json', function(body) {\n\t\tresponse.send(body);\n\t});\n});\napp.listen(8080);\n```\n\nYou can extend the request and response with your own methods\n\n``` js\napp.use('response.time', function() {\n\tthis.send({time:this.request.time});\n});\napp.use('request.time', {getter:true}, function() {\n\treturn Date.now();\n});\n\napp.get(function(req, res) {\n\tres.time();\n});\n```\n\n## Routing\n\nRouting is done using [murl](https://github.com/mafintosh/murl).\nUse the `get`, `post`, `put`, `del`, `patch` or `options` method to specify the HTTP method you want to route\n\n``` js\napp.get('/hello/{world}', function(req, res) {\n\tres.send({world:req.params.world});\n});\napp.get('/test', function(req, res, next) {\n\t// call next to call the next matching route\n\tnext();\n});\napp.get('/test', function(req, res) {\n\tres.send('ok');\n});\n```\n\n## URL normalization\n\nBefore routing an incoming url it is first decoded and normalized\n\n* `/../../` ⇨ `/`\n* `/foo/bar/../baz` ⇨ `/foo/baz`\n* `/foo%20bar` ⇨ `/foo bar`\n* `/foo%2fbar` ⇨ `/foo/bar`\n\nThis basicly means that you don't need to worry about `/..` attacks when serving files or similar.\n\n## Error handling\n\nYou can specify an error handler for a specific error code by using the `error` function\n\n``` js\napp.get('/foo', function(req, res, next) {\n\tres.error(400, 'bad request man'); // or use next(400)\n});\n\napp.error(404, function(req, res) {\n\tres.send({error:'could not find route'});\n});\napp.error(function(req, res) {\n\tres.send({error:'catch all other errors'});\n});\n```\n\n## Plugins\n\nTo create a plugin simply create a function that accepts an `app`\n\n``` js\nvar plugin = function(app) {\n\tapp.get('/my-plugin', function(req, res) {\n\t\tres.send('hello from plugin');\n\t});\n};\n\nmyApp.use(plugin);\n```\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "root@0.5.4",
  "_from": "root"
}
